/* 
 * Ukraine Alert API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * Contact: support@stfalcon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using UkraineAlarm.Client;
using UkraineAlarm.Model;

namespace UkraineAlarm.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAlertsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Області, регіони та громади з тривогами
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertRegionModel&gt;</returns>
        List<AlertRegionModel> ApiV3AlertsGet ();

        /// <summary>
        /// Області, регіони та громади з тривогами
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertRegionModel&gt;</returns>
        ApiResponse<List<AlertRegionModel>> ApiV3AlertsGetWithHttpInfo ();
        /// <summary>
        /// Отримати останніх 25 тривог регіону
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>List&lt;RegionAlarmsHistory&gt;</returns>
        List<RegionAlarmsHistory> ApiV3AlertsRegionHistoryGet (string regionId = null);

        /// <summary>
        /// Отримати останніх 25 тривог регіону
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RegionAlarmsHistory&gt;</returns>
        ApiResponse<List<RegionAlarmsHistory>> ApiV3AlertsRegionHistoryGetWithHttpInfo (string regionId = null);
        /// <summary>
        /// Статус області/регіону/громади
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>List&lt;AlertRegionModel&gt;</returns>
        List<AlertRegionModel> ApiV3AlertsRegionIdGet (string regionId);

        /// <summary>
        /// Статус області/регіону/громади
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>ApiResponse of List&lt;AlertRegionModel&gt;</returns>
        ApiResponse<List<AlertRegionModel>> ApiV3AlertsRegionIdGetWithHttpInfo (string regionId);
        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlertModification</returns>
        AlertModification ApiV3AlertsStatusGet ();

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlertModification</returns>
        ApiResponse<AlertModification> ApiV3AlertsStatusGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Області, регіони та громади з тривогами
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertRegionModel&gt;</returns>
        System.Threading.Tasks.Task<List<AlertRegionModel>> ApiV3AlertsGetAsync ();

        /// <summary>
        /// Області, регіони та громади з тривогами
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertRegionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertRegionModel>>> ApiV3AlertsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Отримати останніх 25 тривог регіону
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>Task of List&lt;RegionAlarmsHistory&gt;</returns>
        System.Threading.Tasks.Task<List<RegionAlarmsHistory>> ApiV3AlertsRegionHistoryGetAsync (string regionId = null);

        /// <summary>
        /// Отримати останніх 25 тривог регіону
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegionAlarmsHistory&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RegionAlarmsHistory>>> ApiV3AlertsRegionHistoryGetAsyncWithHttpInfo (string regionId = null);
        /// <summary>
        /// Статус області/регіону/громади
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>Task of List&lt;AlertRegionModel&gt;</returns>
        System.Threading.Tasks.Task<List<AlertRegionModel>> ApiV3AlertsRegionIdGetAsync (string regionId);

        /// <summary>
        /// Статус області/регіону/громади
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>Task of ApiResponse (List&lt;AlertRegionModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertRegionModel>>> ApiV3AlertsRegionIdGetAsyncWithHttpInfo (string regionId);
        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlertModification</returns>
        System.Threading.Tasks.Task<AlertModification> ApiV3AlertsStatusGetAsync ();

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlertModification)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertModification>> ApiV3AlertsStatusGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AlertsApi : IAlertsApi
    {
        private UkraineAlarm.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertsApi(String basePath)
        {
            this.Configuration = new UkraineAlarm.Client.Configuration { BasePath = basePath };

            ExceptionFactory = UkraineAlarm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AlertsApi()
        {
            this.Configuration = UkraineAlarm.Client.Configuration.Default;

            ExceptionFactory = UkraineAlarm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertsApi(UkraineAlarm.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = UkraineAlarm.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = UkraineAlarm.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public UkraineAlarm.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public UkraineAlarm.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Області, регіони та громади з тривогами 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertRegionModel&gt;</returns>
        public List<AlertRegionModel> ApiV3AlertsGet ()
        {
             ApiResponse<List<AlertRegionModel>> localVarResponse = ApiV3AlertsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Області, регіони та громади з тривогами 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertRegionModel&gt;</returns>
        public ApiResponse< List<AlertRegionModel> > ApiV3AlertsGetWithHttpInfo ()
        {

            var localVarPath = "/api/v3/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertRegionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertRegionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertRegionModel>)));
        }

        /// <summary>
        /// Області, регіони та громади з тривогами 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertRegionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertRegionModel>> ApiV3AlertsGetAsync ()
        {
             ApiResponse<List<AlertRegionModel>> localVarResponse = await ApiV3AlertsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Області, регіони та громади з тривогами 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertRegionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertRegionModel>>> ApiV3AlertsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertRegionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertRegionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertRegionModel>)));
        }

        /// <summary>
        /// Отримати останніх 25 тривог регіону 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>List&lt;RegionAlarmsHistory&gt;</returns>
        public List<RegionAlarmsHistory> ApiV3AlertsRegionHistoryGet (string regionId = null)
        {
             ApiResponse<List<RegionAlarmsHistory>> localVarResponse = ApiV3AlertsRegionHistoryGetWithHttpInfo(regionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Отримати останніх 25 тривог регіону 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;RegionAlarmsHistory&gt;</returns>
        public ApiResponse< List<RegionAlarmsHistory> > ApiV3AlertsRegionHistoryGetWithHttpInfo (string regionId = null)
        {

            var localVarPath = "/api/v3/alerts/regionHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "regionId", regionId)); // query parameter
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsRegionHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegionAlarmsHistory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RegionAlarmsHistory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegionAlarmsHistory>)));
        }

        /// <summary>
        /// Отримати останніх 25 тривог регіону 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>Task of List&lt;RegionAlarmsHistory&gt;</returns>
        public async System.Threading.Tasks.Task<List<RegionAlarmsHistory>> ApiV3AlertsRegionHistoryGetAsync (string regionId = null)
        {
             ApiResponse<List<RegionAlarmsHistory>> localVarResponse = await ApiV3AlertsRegionHistoryGetAsyncWithHttpInfo(regionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Отримати останніх 25 тривог регіону 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegionAlarmsHistory&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RegionAlarmsHistory>>> ApiV3AlertsRegionHistoryGetAsyncWithHttpInfo (string regionId = null)
        {

            var localVarPath = "/api/v3/alerts/regionHistory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "regionId", regionId)); // query parameter
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsRegionHistoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegionAlarmsHistory>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<RegionAlarmsHistory>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegionAlarmsHistory>)));
        }

        /// <summary>
        /// Статус області/регіону/громади 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>List&lt;AlertRegionModel&gt;</returns>
        public List<AlertRegionModel> ApiV3AlertsRegionIdGet (string regionId)
        {
             ApiResponse<List<AlertRegionModel>> localVarResponse = ApiV3AlertsRegionIdGetWithHttpInfo(regionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Статус області/регіону/громади 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>ApiResponse of List&lt;AlertRegionModel&gt;</returns>
        public ApiResponse< List<AlertRegionModel> > ApiV3AlertsRegionIdGetWithHttpInfo (string regionId)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling AlertsApi->ApiV3AlertsRegionIdGet");

            var localVarPath = "/api/v3/alerts/{regionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("regionId", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsRegionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertRegionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertRegionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertRegionModel>)));
        }

        /// <summary>
        /// Статус області/регіону/громади 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>Task of List&lt;AlertRegionModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertRegionModel>> ApiV3AlertsRegionIdGetAsync (string regionId)
        {
             ApiResponse<List<AlertRegionModel>> localVarResponse = await ApiV3AlertsRegionIdGetAsyncWithHttpInfo(regionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Статус області/регіону/громади 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regionId">ID області/регіону/громади</param>
        /// <returns>Task of ApiResponse (List&lt;AlertRegionModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertRegionModel>>> ApiV3AlertsRegionIdGetAsyncWithHttpInfo (string regionId)
        {
            // verify the required parameter 'regionId' is set
            if (regionId == null)
                throw new ApiException(400, "Missing required parameter 'regionId' when calling AlertsApi->ApiV3AlertsRegionIdGet");

            var localVarPath = "/api/v3/alerts/{regionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (regionId != null) localVarPathParams.Add("regionId", this.Configuration.ApiClient.ParameterToString(regionId)); // path parameter
            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsRegionIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertRegionModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertRegionModel>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertRegionModel>)));
        }

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AlertModification</returns>
        public AlertModification ApiV3AlertsStatusGet ()
        {
             ApiResponse<AlertModification> localVarResponse = ApiV3AlertsStatusGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AlertModification</returns>
        public ApiResponse< AlertModification > ApiV3AlertsStatusGetWithHttpInfo ()
        {

            var localVarPath = "/api/v3/alerts/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertModification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertModification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertModification)));
        }

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AlertModification</returns>
        public async System.Threading.Tasks.Task<AlertModification> ApiV3AlertsStatusGetAsync ()
        {
             ApiResponse<AlertModification> localVarResponse = await ApiV3AlertsStatusGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Перевірка номеру останньої дії. Використовувати для перевірки необхідності оновлювати дані 
        /// </summary>
        /// <exception cref="UkraineAlarm.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AlertModification)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertModification>> ApiV3AlertsStatusGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/api/v3/alerts/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV3AlertsStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertModification>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertModification) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertModification)));
        }

    }
}
