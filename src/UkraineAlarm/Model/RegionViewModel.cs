/* 
 * Ukraine Alert API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * Contact: support@stfalcon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = UkraineAlarm.Client.SwaggerDateConverter;
namespace UkraineAlarm.Model
{
    /// <summary>
    /// RegionViewModel
    /// </summary>
    [DataContract]
        public partial class RegionViewModel :  IEquatable<RegionViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegionViewModel" /> class.
        /// </summary>
        /// <param name="regionId">regionId.</param>
        /// <param name="regionName">regionName.</param>
        /// <param name="regionType">regionType.</param>
        /// <param name="regionChildIds">regionChildIds.</param>
        public RegionViewModel(string regionId = default(string), string regionName = default(string), V2RegionType regionType = default(V2RegionType), List<RegionViewModel> regionChildIds = default(List<RegionViewModel>))
        {
            this.RegionId = regionId;
            this.RegionName = regionName;
            this.RegionType = regionType;
            this.RegionChildIds = regionChildIds;
        }
        
        /// <summary>
        /// Gets or Sets RegionId
        /// </summary>
        [DataMember(Name="regionId", EmitDefaultValue=false)]
        public string RegionId { get; set; }

        /// <summary>
        /// Gets or Sets RegionName
        /// </summary>
        [DataMember(Name="regionName", EmitDefaultValue=false)]
        public string RegionName { get; set; }

        /// <summary>
        /// Gets or Sets RegionType
        /// </summary>
        [DataMember(Name="regionType", EmitDefaultValue=false)]
        public V2RegionType RegionType { get; set; }

        /// <summary>
        /// Gets or Sets RegionChildIds
        /// </summary>
        [DataMember(Name="regionChildIds", EmitDefaultValue=false)]
        public List<RegionViewModel> RegionChildIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegionViewModel {\n");
            sb.Append("  RegionId: ").Append(RegionId).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RegionType: ").Append(RegionType).Append("\n");
            sb.Append("  RegionChildIds: ").Append(RegionChildIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegionViewModel);
        }

        /// <summary>
        /// Returns true if RegionViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RegionViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegionViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RegionId == input.RegionId ||
                    (this.RegionId != null &&
                    this.RegionId.Equals(input.RegionId))
                ) && 
                (
                    this.RegionName == input.RegionName ||
                    (this.RegionName != null &&
                    this.RegionName.Equals(input.RegionName))
                ) && 
                (
                    this.RegionType == input.RegionType ||
                    (this.RegionType != null &&
                    this.RegionType.Equals(input.RegionType))
                ) && 
                (
                    this.RegionChildIds == input.RegionChildIds ||
                    this.RegionChildIds != null &&
                    input.RegionChildIds != null &&
                    this.RegionChildIds.SequenceEqual(input.RegionChildIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RegionId != null)
                    hashCode = hashCode * 59 + this.RegionId.GetHashCode();
                if (this.RegionName != null)
                    hashCode = hashCode * 59 + this.RegionName.GetHashCode();
                if (this.RegionType != null)
                    hashCode = hashCode * 59 + this.RegionType.GetHashCode();
                if (this.RegionChildIds != null)
                    hashCode = hashCode * 59 + this.RegionChildIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
